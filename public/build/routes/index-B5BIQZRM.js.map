{
  "version": 3,
  "sources": ["browser-route-module:Z:\\GIT\\Repositories\\GW2ItemFinder\\app\\routes\\index.tsx?browser", "../../../app/routes/index.tsx", "../../../app/components/ItemCard.tsx", "../../../app/GW2Api/GW2ItemFindProcess.ts", "../../../app/GW2Api/GW2API_Call.ts"],
  "sourcesContent": ["export { default } from \"Z:\\\\GIT\\\\Repositories\\\\GW2ItemFinder\\\\app\\\\routes\\\\index.tsx\";", "import { QuestionMarkCircleIcon } from '@heroicons/react/outline'\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport  SearchResult, { ItemCard } from '~/components/ItemCard';\nimport { useLoaderData } from 'remix';\nimport type { LoaderFunction } from 'remix';\n\n\n\n\n\nexport const loader : LoaderFunction = async() =>{\n  //const [itemCards, setItemCards] = useState<ItemCard[]>([]);\n  let buffer : JSX.Element[] = [];\n  // for (let i = 0; i < itemCards.length; i++) {\n  //   buffer.push (itemCards[i].render());\n  // }\n\n  return buffer;\n}\n\nfunction GenerateUID() : string {\n return Math.random().toString(36).substr(2, 32);\n}\n\nexport default function Index() {\n\n  const [itemCards, setItemCards] = useState<ItemCard[]>([]);\n  const [itemAmount, setItemAmount] = useState(0);\n  const [input_apiKey, setinput_apiKey] = useState(\"8C902A33-9169-7F44-AC09-131DEE2815835E0A7135-1AF8-4602-BEF7-74AB5ADF9980\")\n  const [input_itemID, setinput_itemID] = useState(\"\")\n\n  function FindItem(){\n    \n    let ic_copy = itemCards;\n    ic_copy.push({uid:GenerateUID(), apiKey: input_apiKey,itemID: input_itemID });\n    setItemCards(ic_copy);\n    setItemAmount(itemCards.length);\n    console.log(itemCards.length);\n\n  }\n\n  let items = useLoaderData();\n  return (\n    <>\n    <div className=\"bg-gray-800 border-solid rounded-2xl px-5 py-5\">\n      <div>\n        <div>\n          <label className=\"block text-sm font-medium text-white px-1 py-1\">\n            Enter a valid API Key\n            </label>\n        </div>\n        <input type=\"text\" name=\"api-key\" id=\"api-key\" className=\"focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-2 pr-2 py-1 sm:text-sm border-gray-300 rounded-md\" placeholder=\"API Key\" onChange={e=>setinput_apiKey(e.target.value)}>\n        </input>\n        <div className=\"py-1\"></div>\n        <div>\n          <label className=\"block text-sm font-medium text-white px-1 py-1\">\n            Item ID\n            </label>\n        </div>\n        <div className=\"grid grid-cols-12 place-items-center justify-items-auto\">\n          <input type=\"text\" name=\"item-id\" id=\"item-id\" className=\"focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-2 pr-2 py-1 sm:text-sm border-gray-300 rounded-md col-span-11\" placeholder=\"Item ID [e.g. 76643]\" onChange={e=>setinput_itemID(e.target.value)}>\n          </input>\n          <Link to=\"/ItemLists\"> <QuestionMarkCircleIcon className=\"block h-8 w-8 text-white hover:text-gray-400\"></QuestionMarkCircleIcon></Link>\n        </div>\n        <div className=\"py-1\"></div>\n        <button name=\"confirm-button\" id=\"confirm-button\" className=\"pl-2 pr-2 py-1 rounded-md border-gray-300 bg-green-300 w-full mt-2\" onClick={FindItem}>Find My Shit!</button>\n      </div>\n    </div>\n    {itemCards.map((item)=>\n      <div key={item.uid} className=\"py-2\">\n         <SearchResult uid={item.uid} apiKey={item.apiKey} itemID={item.itemID}/>\n      </div>\n    )}\n    \n  </>\n  );\n}\n", "import { render } from \"@headlessui/react/dist/utils/render\";\r\nimport React, { Component } from \"react\";\r\nimport { GW2API_Call } from \"~/GW2Api/GW2API_Call\";\r\nimport { LoaderFunction, useLoaderData } from 'remix'\r\nimport { useEffect, useState } from \"react\";\r\nimport { GW2ItemFindProcess } from \"~/GW2Api/GW2ItemFindProcess\";\r\n\r\n\r\nexport type ItemCard = {\r\n    uid : string,\r\n    apiKey: string,\r\n    itemID: string,\r\n\r\n}\r\n\r\nconst useAPIData = (apikey,itemid) => {\r\n    const [apiData, setApiData] = useState([])\r\n    const [isLoading, setLoading] = useState(true)\r\n    const [result, setResult] = useState(\"test\")\r\n\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        \r\n        let FindProcess : GW2ItemFindProcess = new GW2ItemFindProcess(apikey,itemid)\r\n        \r\n        FindProcess.Execute().then(res=>{\r\n            setResult(res);\r\n\r\n            setLoading(false);\r\n        }).catch(err=>{\r\n\r\n        });\r\n     \r\n    },[]);\r\n\r\n    return {apiData, isLoading, result}\r\n}\r\n\r\n\r\nconst ItemSearch = (props : ItemCard) => {\r\n    const { apiData, isLoading,result } = useAPIData(props.apiKey, props.itemID);\r\n    return (\r\n        <div className=\"bg-gray-800 border-solid rounded-2xl px-5 py-5\">\r\n        {isLoading ? (\r\n            <p className=\"loading-text\">Loading Data...</p>\r\n        ) : (\r\n            <p className=\"loading-text\">{result}</p>\r\n        )}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default ItemSearch;", "import { EqTemplateResult, GW2API_Call } from \"./GW2API_Call\";\r\n\r\nexport class GW2ItemFindProcess{\r\n\r\n    apiKey: string;\r\n    itemID: string;\r\n\r\n\r\n\r\n\r\n    constructor(apiKey: string, itemID: string){\r\n        this.apiKey = apiKey;\r\n        this.itemID = itemID;\r\n    }\r\n\r\n    \r\n\r\n    async Execute() : Promise<string> {\r\n        return new Promise((resolve,error)=>{\r\n            let apiCall : GW2API_Call = new GW2API_Call(this.apiKey);\r\n            // First get the character list\r\n            apiCall.GetCharacterList().then((result)=>{\r\n                const characters = result;\r\n\r\n                const pendingTemplates = [];\r\n                for (let i = 0; i < characters.length; i++) {\r\n                    const characterName = characters[i];\r\n                    \r\n                    const fetchEqTempaltes = new GW2API_Call(this.apiKey).GetEquipmentTemplates(characterName);\r\n                    pendingTemplates.push(fetchEqTempaltes);\r\n                }\r\n           \r\n                // Get EqTemplates of all characters\r\n                Promise.all(pendingTemplates)\r\n                .then(results=>{\r\n                    if(results == null || results.length == 0){\r\n                        resolve(\"Error- No EquipmentTemplates could be retrieved\");\r\n                        return;\r\n                    }\r\n                    for (let j = 0; j < results.length; j++) {\r\n                        const templateResult: EqTemplateResult = results[j];\r\n                        console.log(templateResult);     \r\n                    }\r\n                    resolve(\"Success, retrieved all results\");\r\n                });\r\n\r\n                // get Equipment Templates for all Characters\r\n                resolve(\"IsDone\");\r\n            }\r\n\r\n            ).catch((error)=>{\r\n                error(\"Error\");\r\n            }          \r\n            );\r\n        });\r\n    }\r\n\r\n\r\n}", "import { resolvePath } from \"react-router\";\r\n\r\nexport type EqTemplateResult ={\r\n    CharacterName: string,\r\n    TemplateList: string[]\r\n}\r\n\r\nexport class GW2API_Call {\r\n\r\n    ApiKey: string;\r\n    URI: string;\r\n    IsDone: boolean;\r\n    Response: string;\r\n\r\n    constructor(apiKey: string){\r\n        this.ApiKey = apiKey;\r\n        this.URI = \"\";\r\n        this.Response = \"test\";\r\n        this.IsDone = false;\r\n    }\r\n\r\n    async call() : Promise<string>{\r\n        return new Promise((resolve,error)=>{\r\n            let context = this;\r\n            let endpoint = this.URI+\"?access_token=\"+this.ApiKey;\r\n            console.log(endpoint);\r\n            return fetch(endpoint, {\r\n                method: 'GET',\r\n                redirect: 'follow'\r\n            }).then(response =>{\r\n                context.IsDone = true;\r\n                response.text().then(res=>{\r\n                    context.Response = res;\r\n                    resolve(res);\r\n                });\r\n            }).catch(err=> error(\"Error: \" + err));\r\n        })\r\n       \r\n    }\r\n\r\n    GetCharacterList() : Promise<string[]>{\r\n        return new Promise((res,err)=>{\r\n            this.URI = \"https://api.guildwars2.com/v2/characters\";\r\n            this.call().then((resolve)=>{\r\n                res(JSON.parse(this.Response));\r\n            })\r\n            .catch(()=>{err(\"Error\")});\r\n        }) \r\n    }\r\n\r\n    GetEquipmentTemplates(characterName :string) : Promise<EqTemplateResult> {\r\n        return new Promise<EqTemplateResult>((resolve,error)=>{\r\n            this.URI = \"https://api.guildwars2.com/v2/characters/\" + characterName + \"/equipmenttabs\";\r\n            this.call().then((res)=>{\r\n                const result : EqTemplateResult = {CharacterName : characterName, TemplateList : JSON.parse(res)};\r\n                resolve(result);\r\n            }).catch(err=>error(err));\r\n    });\r\n}\r\n\r\n}"],
  "mappings": "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",
  "names": []
}
