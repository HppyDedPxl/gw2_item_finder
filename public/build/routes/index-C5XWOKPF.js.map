{
  "version": 3,
  "sources": ["browser-route-module:Z:\\GIT\\Repositories\\GW2ItemFinder\\app\\routes\\index.tsx?browser", "../../../app/routes/index.tsx", "../../../app/components/ItemCard.tsx", "../../../app/GW2Api/GW2ItemFindProcess.ts", "../../../app/GW2Api/GW2AccountInfo.ts", "../../../app/GW2Api/GW2API_Call.ts", "../../../app/GW2Api/GW2Character.ts", "../../../app/GW2Api/GW2EquipmentTab.ts", "../../../app/GW2Api/GW2Item.ts"],
  "sourcesContent": ["export { default } from \"Z:\\\\GIT\\\\Repositories\\\\GW2ItemFinder\\\\app\\\\routes\\\\index.tsx\";", "import { QuestionMarkCircleIcon } from '@heroicons/react/outline'\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport  SearchResult, { ItemCard } from '~/components/ItemCard';\nimport { useLoaderData } from 'remix';\nimport type { LoaderFunction } from 'remix';\n\n\n\n\n\nexport const loader : LoaderFunction = async() =>{\n  //const [itemCards, setItemCards] = useState<ItemCard[]>([]);\n  let buffer : JSX.Element[] = [];\n  // for (let i = 0; i < itemCards.length; i++) {\n  //   buffer.push (itemCards[i].render());\n  // }\n\n  return buffer;\n}\n\nfunction GenerateUID() : string {\n return Math.random().toString(36).substr(2, 32);\n}\n\nexport default function Index() {\n\n  const [itemCards, setItemCards] = useState<ItemCard[]>([]);\n  const [itemAmount, setItemAmount] = useState(0);\n  const [input_apiKey, setinput_apiKey] = useState(\"8C902A33-9169-7F44-AC09-131DEE2815835E0A7135-1AF8-4602-BEF7-74AB5ADF9980\")\n  const [input_itemID, setinput_itemID] = useState(\"79978\")\n\n  function FindItem(){\n    \n    let ic_copy = itemCards;\n    ic_copy.push({uid:GenerateUID(), apiKey: input_apiKey,itemID: input_itemID });\n    setItemCards(ic_copy);\n    setItemAmount(itemCards.length);\n    console.log(itemCards.length);\n\n  }\n\n  let items = useLoaderData();\n  return (\n    <>\n    <div className=\"bg-gray-800 border-solid rounded-2xl px-5 py-5\">\n      <div>\n        <div>\n          <label className=\"block text-sm font-medium text-white px-1 py-1\">\n            Enter a valid API Key\n            </label>\n        </div>\n        <input type=\"text\" name=\"api-key\" id=\"api-key\" className=\"focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-2 pr-2 py-1 sm:text-sm border-gray-300 rounded-md\" placeholder=\"API Key\" onChange={e=>setinput_apiKey(e.target.value)}>\n        </input>\n        <div className=\"py-1\"></div>\n        <div>\n          <label className=\"block text-sm font-medium text-white px-1 py-1\">\n            Item ID\n            </label>\n        </div>\n        <div className=\"grid grid-cols-12 place-items-center justify-items-auto\">\n          <input type=\"text\" name=\"item-id\" id=\"item-id\" className=\"focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-2 pr-2 py-1 sm:text-sm border-gray-300 rounded-md col-span-11\" placeholder=\"Item ID [e.g. 76643]\" onChange={e=>setinput_itemID(e.target.value)}>\n          </input>\n          <Link to=\"/ItemLists\"> <QuestionMarkCircleIcon className=\"block h-8 w-8 text-white hover:text-gray-400\"></QuestionMarkCircleIcon></Link>\n        </div>\n        <div className=\"py-1\"></div>\n        <button name=\"confirm-button\" id=\"confirm-button\" className=\"pl-2 pr-2 py-1 rounded-md border-gray-300 bg-green-300 w-full mt-2\" onClick={FindItem}>Find My Shit!</button>\n      </div>\n    </div>\n    {itemCards.map((item)=>\n      <div key={item.uid} className=\"py-2\">\n         <SearchResult uid={item.uid} apiKey={item.apiKey} itemID={item.itemID}/>\n      </div>\n    )}\n    \n  </>\n  );\n}\n", "import { render } from \"@headlessui/react/dist/utils/render\";\r\nimport React, { Component } from \"react\";\r\nimport { GW2API_Call } from \"~/GW2Api/GW2API_Call\";\r\nimport { LoaderFunction, useLoaderData } from 'remix'\r\nimport { useEffect, useState } from \"react\";\r\nimport { GW2ItemFindProcess } from \"~/GW2Api/GW2ItemFindProcess\";\r\nimport { GW2AccountInfo, GW2AccountSearchResult } from \"~/GW2Api/GW2AccountInfo\";\r\nimport { GW2Item } from \"~/GW2Api/GW2Item\";\r\n\r\n\r\nexport type ItemCard = {\r\n    uid: string;\r\n    apiKey: string,\r\n    itemID: string,\r\n\r\n}\r\n\r\nconst useAPIData = (apikey,itemid) => {\r\n    const [apiData, setApiData] = useState([])\r\n    const [isLoading, setLoading] = useState(true)\r\n    const [result, setResult] = useState<GW2AccountSearchResult[]>([])\r\n    const [searchItem, setSearchItem] = useState<GW2Item>()\r\n\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n\r\n        // First, get info about the item we want to display\r\n        let item : GW2Item = new GW2Item(itemid);\r\n        item.populateFromAPI()\r\n        .then(res=>{\r\n            // The Item we are trying to find is valid! Save it then find where on the account it could be\r\n            setSearchItem(res);\r\n\r\n            let FindProcess : GW2ItemFindProcess = new GW2ItemFindProcess(apikey,itemid)\r\n\r\n            // Find the item by it's number\r\n            FindProcess.Execute().then(res=>{\r\n                let results : GW2AccountSearchResult[] = [];\r\n                setResult(res);\r\n\r\n                setLoading(false);\r\n            }).catch(err=>{\r\n\r\n        });\r\n     \r\n\r\n        })\r\n        .catch(err=>{\r\n            setLoading(false);\r\n            console.log(\"No Valid Item Found!\");\r\n        })\r\n \r\n    },[]);\r\n\r\n    return {apiData, isLoading, result, searchItem}\r\n}\r\n\r\n\r\nconst ItemSearch = (props : ItemCard) => {\r\n    const { apiData, isLoading,result, searchItem } = useAPIData(props.apiKey, props.itemID);\r\n    return (\r\n        <div className=\"bg-gray-800 border-solid border-solid  border-2 border-gray-900 rounded-2xl px-5 py-5\">\r\n        {isLoading ? (\r\n            <p className=\"loading-text\">Loading Data...</p>\r\n        ) : (\r\n            <div>\r\n                <div className=\"bg-gray-800 border-solid  border-gray-900 rounded 1xl mx-1 my-1 h-8 flex flex-row\">\r\n                    <img src={searchItem?.IconUrl} className=\"h-full pr-2\"></img>\r\n                    <div className=\"flex items-center justify-center text-white\">{searchItem?.Name}</div>\r\n                </div>\r\n                {result.map(r=>(\r\n                <div key={r.uuid}>\r\n\r\n                    <div className=\"my-1 mx-1 my-1 h-8 flex flex-row\">              \r\n                    <img src={\"icons/\"+r.Character.GetCharacterClass()+\".png\"} className=\"h-full pr-2\"></img>\r\n                    <div className=\"flex items-center justify-center text-white\">{r.Character.name}</div>\r\n                    </div>\r\n\r\n                    <div className=\"my-1 mx-1 my-1 h-8 flex flex-row\">              \r\n                    <div className=\"flex items-center justify-center text-white\">Slot:</div>\r\n                    <div className=\"flex items-center justify-center text-white\">{r.Slot}</div>\r\n                    </div>\r\n\r\n                    <div className=\"my-1 mx-1 my-1 h-8 flex flex-row\">              \r\n                    <div className=\"flex items-center justify-center text-white\">Slot:</div>\r\n                    <div className=\"flex items-center justify-center text-white\">{r.Slot}</div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            </div>\r\n\r\n        )}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default ItemSearch;", "import { GW2AccountInfo, GW2AccountSearchResult } from \"./GW2AccountInfo\";\r\nimport { CharacterEqTemplateResult, EqTemplateListResult, GW2API_Call } from \"./GW2API_Call\";\r\n\r\nexport class GW2ItemFindProcess{\r\n\r\n    apiKey: string;\r\n    itemID: string;\r\n\r\n\r\n\r\n\r\n    constructor(apiKey: string, itemID: string){\r\n        this.apiKey = apiKey;\r\n        this.itemID = itemID;\r\n    }\r\n\r\n    async Execute() : Promise<GW2AccountSearchResult[]> {\r\n        return new Promise((resolve,error)=>{\r\n            let apiCall : GW2API_Call = new GW2API_Call(this.apiKey);\r\n            // First get the character list\r\n            apiCall.GetCharacterList().then((result)=>{\r\n                const characters = result;\r\n\r\n                const pendingTemplates : Promise<EqTemplateListResult>[] = [];\r\n                for (let i = 0; i < characters.length; i++) {\r\n                    const characterName = characters[i];\r\n                    \r\n                    const fetchEqTempaltes = new GW2API_Call(this.apiKey).GetEquipmentTemplates(characterName);\r\n                    pendingTemplates.push(fetchEqTempaltes);\r\n                }\r\n           \r\n                // Get EqTemplates of all characters\r\n                return Promise.all(pendingTemplates)\r\n                .then(results=>{\r\n                    if(results == null || results.length == 0){\r\n                        resolve([]);\r\n                        return;\r\n                    }\r\n\r\n                    const pendingPopulatedEquipmentTemplates : Promise<CharacterEqTemplateResult>[] = []\r\n                    // We have aquired all Templates, now aquire all Equipment in all of the templates\r\n                    for (let j = 0; j < results.length; j++) {\r\n                        const templateResult: EqTemplateListResult = results[j];\r\n                        for (let k = 0; k < templateResult.TemplateList.length; k++) {\r\n                            const templateID = templateResult.TemplateList[k];\r\n                            const fetchEquipment = new GW2API_Call(this.apiKey).GetEquipmentFromTemplate(templateResult.CharacterName, templateID);\r\n                            pendingPopulatedEquipmentTemplates.push(fetchEquipment);\r\n                        }\r\n                    }\r\n                    // Fire all Lookups to get equipment data on every character\r\n                    return Promise.all(pendingPopulatedEquipmentTemplates)\r\n                    .then(eqData=>{\r\n\r\n                        if(eqData == null || eqData.length == 0){\r\n                            resolve([]);\r\n                            return;\r\n                        }\r\n                        for (let i = 0; i < eqData.length; i++) {\r\n                            const element = eqData[i];\r\n                        }\r\n\r\n                        // Compose account Object\r\n                        let accountInfo : GW2AccountInfo = new GW2AccountInfo();\r\n                        accountInfo.populateWithData(eqData);\r\n\r\n                        // Resolve all character Data on Account to ensure that \"findItemInAccount\" can provide all meta data like character class name traits etc.\r\n                        accountInfo.resolveCharactersFromAPI(this.apiKey).then(res=>{\r\n\r\n                            // Find and return the item\r\n                            let searchHits : GW2AccountSearchResult[] = accountInfo.FindItemInAccount(parseInt(this.itemID));\r\n                            console.log(searchHits);\r\n                            resolve(searchHits);\r\n                        })\r\n                        .catch(err=>{\r\n                            error(err);\r\n                        })\r\n                    });\r\n                    \r\n                });\r\n            }\r\n\r\n            ).catch((error)=>{\r\n                error(\"Error\");\r\n            }          \r\n            );\r\n        });\r\n    }\r\n\r\n\r\n}", "import { CharacterEqTemplateResult, CharacterResult, GW2API_Call } from \"./GW2API_Call\";\r\nimport { GW2Character } from \"./GW2Character\";\r\nimport { GW2EquipmentTab } from \"./GW2EquipmentTab\";\r\n\r\nexport type GW2AccountSearchResult = {\r\n    uuid: string;\r\n    Character: GW2Character,\r\n    EquipmentTabNr: number,\r\n    EquipmentTabName: string,\r\n    Slot: string,\r\n}\r\n\r\n\r\nfunction GenerateUID() : string {\r\n    return Math.random().toString(36).substr(2, 32);\r\n   }\r\n\r\nexport class GW2AccountInfo{\r\n\r\n    characters: GW2Character[];\r\n\r\n    constructor(){\r\n        this.characters = [];\r\n    }\r\n\r\n    populateWithData(data: CharacterEqTemplateResult[] ){\r\n        for (let i = 0; i < data.length; i++) {\r\n            const element = data[i];\r\n            // check wether a character like that already exists in the character list\r\n            if(this.characters.some((e) => e.name === element.CharacterName)){\r\n                // Exists, just append new equipment Template\r\n                for (let j = 0; j < this.characters.length; j++) {\r\n                    if(this.characters[j].name == element.CharacterName){\r\n                        this.characters[j].eqTabs.push(new GW2EquipmentTab(element.Equipment));\r\n                    }         \r\n                }\r\n            }\r\n            else{\r\n             \r\n                // Does not exist, create new character\r\n                let newChar : GW2Character = new GW2Character();\r\n                newChar.name = element.CharacterName;\r\n                newChar.eqTabs = [];\r\n                newChar.eqTabs.push(new GW2EquipmentTab(element.Equipment));\r\n                this.characters.push(newChar);\r\n            }    \r\n        }\r\n    }\r\n\r\n    resolveCharactersFromAPI(apiKey: string) : Promise<GW2AccountInfo> {\r\n        return new Promise((resolve, error)=>{\r\n\r\n            let pendingRequests : Promise<CharacterResult>[] = [];\r\n            for (let i = 0; i < this.characters.length; i++) {\r\n                const character = this.characters[i];\r\n                pendingRequests.push(new GW2API_Call(apiKey).GetCharacterData(this.characters[i].name));\r\n            }\r\n\r\n            Promise.all(pendingRequests).then(results=>{\r\n                // write back data to the proper character\r\n                results.forEach(result => {\r\n                    for (let i = 0; i < this.characters.length; i++) {\r\n                        if(this.characters[i].name === result.CharacterName){\r\n                            this.characters[i].profession = result.CharacterProfession;\r\n                            this.characters[i].SetActivePvESpecializations(result.CharacterPvESpecs);\r\n                            this.characters[i].Bags = result.CharacterBags;\r\n                        }\r\n                    }\r\n                });\r\n                resolve(this);\r\n            })\r\n        });\r\n    }\r\n\r\n    FindItemInAccount(searchId : number) : GW2AccountSearchResult[] {\r\n\r\n        let hits : GW2AccountSearchResult[] = [];\r\n\r\n        this.characters.forEach(character => {\r\n            character.eqTabs.forEach(equipmentTab => {\r\n                equipmentTab.equipment.forEach(item => {\r\n                    \r\n                    // check if the item in question is the item we are looking for\r\n                    if(item.id === searchId)\r\n                        hits.push({uuid: GenerateUID(), Character: character,EquipmentTabNr: equipmentTab.id, EquipmentTabName: equipmentTab.name, Slot: item.slot});\r\n\r\n                    // check if the item is one of the infusions\r\n                    if(item.infusions !== undefined){\r\n                        item.infusions.forEach(infusion => {\r\n                            if(infusion === searchId){\r\n                                hits.push({uuid: GenerateUID(),Character: character,EquipmentTabNr: equipmentTab.id, EquipmentTabName: equipmentTab.name, Slot: item.slot});\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    // check if the item is one of the upgrades\r\n                    if(item.upgrades !== undefined){\r\n                        item.upgrades.forEach(upgrade => {\r\n                            if(upgrade === searchId){\r\n                                hits.push({uuid: GenerateUID(),Character: character,EquipmentTabNr: equipmentTab.id, EquipmentTabName: equipmentTab.name, Slot: item.slot});\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        return hits;\r\n    }\r\n\r\n\r\n\r\n\r\n}", "import { resolvePath } from \"react-router\";\r\n\r\nexport type CharacterResult = {\r\n    CharacterName: string,\r\n    CharacterProfession: string,\r\n    CharacterBags: object,\r\n    CharacterPvESpecs : object\r\n  \r\n}\r\n\r\nexport type EqTemplateListResult ={\r\n    CharacterName: string,\r\n    TemplateList: string[]\r\n}\r\n\r\nexport type CharacterEqTemplateResult = {\r\n    CharacterName: string,\r\n    EqTemplateId: string,\r\n    Equipment: object\r\n}\r\n\r\nexport type ItemDataResult = {\r\n    ID: number;\r\n    Name: string;\r\n    IconUrl: string;\r\n    Type: string;\r\n}\r\n\r\nexport class GW2API_Call {\r\n\r\n    ApiKey: string;\r\n    URI: string;\r\n    IsDone: boolean;\r\n    Response: string;\r\n\r\n    constructor(apiKey: string){\r\n        this.ApiKey = apiKey;\r\n        this.URI = \"\";\r\n        this.Response = \"test\";\r\n        this.IsDone = false;\r\n    }\r\n\r\n    async call() : Promise<string>{\r\n        return new Promise((resolve,error)=>{\r\n            let context = this;\r\n            let endpoint = this.URI+\"?access_token=\"+this.ApiKey;\r\n            return fetch(endpoint, {\r\n                method: 'GET',\r\n                redirect: 'follow'\r\n            }).then(response =>{\r\n                context.IsDone = true;\r\n                response.text().then(res=>{\r\n                    context.Response = res;\r\n                    resolve(res);\r\n                });\r\n            }).catch(err=> error(\"Error: \" + err));\r\n        })     \r\n    }\r\n\r\n    async callNoAuth() : Promise<string>{\r\n        return new Promise((resolve,error)=>{\r\n            let context = this;\r\n            let endpoint = this.URI;\r\n            return fetch(endpoint, {\r\n                method: 'GET',\r\n                redirect: 'follow'\r\n            }).then(response =>{\r\n                context.IsDone = true;\r\n                response.text().then(res=>{\r\n                    context.Response = res;\r\n                    resolve(res);\r\n                });\r\n            }).catch(err=> error(\"Error: \" + err));\r\n        })\r\n    }\r\n\r\n    GetCharacterList() : Promise<string[]>{\r\n        return new Promise((res,err)=>{\r\n            this.URI = \"https://api.guildwars2.com/v2/characters\";\r\n            this.call().then((resolve)=>{\r\n                res(JSON.parse(this.Response));\r\n            })\r\n            .catch(()=>{err(\"Error\")});\r\n        }) \r\n    }\r\n\r\n    GetEquipmentTemplates(characterName :string) : Promise<EqTemplateListResult> {\r\n        return new Promise<EqTemplateListResult>((resolve,error)=>{\r\n            this.URI = \"https://api.guildwars2.com/v2/characters/\" + characterName + \"/equipmenttabs\";\r\n            this.call().then((res)=>{\r\n                const result : EqTemplateListResult = {CharacterName : characterName, TemplateList : JSON.parse(res)};\r\n                resolve(result);\r\n            }).catch(err=>error(err));\r\n        });\r\n    }\r\n\r\n    GetEquipmentFromTemplate(characterName: string, templateId: string ) : Promise<CharacterEqTemplateResult>{\r\n        return new Promise<CharacterEqTemplateResult>((resolve,error)=>{\r\n            this.URI = \"https://api.guildwars2.com/v2/characters/\" + characterName + \"/equipmenttabs/\" + templateId;\r\n            this.call().then((res)=>{\r\n                const result : CharacterEqTemplateResult = {CharacterName : characterName, EqTemplateId : templateId, Equipment : JSON.parse(res)};\r\n                resolve(result);\r\n            }).catch(err=>error(err));\r\n        });\r\n    }\r\n\r\n    GetCharacterData(characterName: string) : Promise<CharacterResult>{\r\n        return new Promise<CharacterResult>((resolve,error)=>{\r\n            this.URI = \"https://api.guildwars2.com/v2/characters/\" + characterName;\r\n            this.call().then((res)=>{\r\n                let jsonRes = JSON.parse(res);\r\n                const result : CharacterResult = {CharacterName: characterName, CharacterProfession: jsonRes.profession, CharacterBags: jsonRes.bags, CharacterPvESpecs: jsonRes.specializations.pve };\r\n                resolve(result);\r\n            }).catch(err=>error(err));\r\n        });\r\n    }\r\n\r\n    GetItemData(itemId: number) : Promise<ItemDataResult>{\r\n        return new Promise<ItemDataResult>((resolve,error)=>{\r\n            this.URI = \"https://api.guildwars2.com/v2/items/\" + itemId;\r\n            this.call().then((res)=>{\r\n                let jsonRes = JSON.parse(res);\r\n                const result : ItemDataResult = {ID : itemId, Name : jsonRes.name, IconUrl : jsonRes.icon, Type: jsonRes.type};\r\n                resolve(result);\r\n            }).catch(err=>error(err));\r\n        });\r\n    }\r\n\r\n}", "import { GW2EquipmentTab } from \"./GW2EquipmentTab\";\r\n\r\nconst EliteSpecLookupTable = {\r\n    // HOT\r\n    5: \"Druid\",\r\n    7: \"Daredevil\",\r\n    18: \"Berserker\",\r\n    27: \"Dragonhunter\",\r\n    34: \"Reaper\",\r\n    40: \"Chronomancer\",\r\n    43: \"Scrapper\",\r\n    48: \"Tempest\",\r\n    52: \"Herald\",\r\n\r\n    // POF\r\n    55: \"Soulbeast\",\r\n    56: \"Weaver\",\r\n    57: \"Holosmith\",\r\n    58: \"Deadeye\",\r\n    59: \"Mirage\",\r\n    60: \"Scourge\",\r\n    61: \"Spellbreaker\",\r\n    62: \"Firebrand\",\r\n    63: \"Renegade\",\r\n\r\n    // EoD\r\n    64: \"Harbinger\",\r\n    65: \"Willbender\",\r\n    66: \"Virtuoso\",\r\n    67: \"Catalyst\",\r\n    68: \"BladeSworn\",\r\n    69: \"Vindicator\",\r\n    70: \"Mechanist\",\r\n    71: \"Specter\",\r\n    72: \"Untamed\"\r\n}\r\n\r\nexport class GW2Character{\r\n    name: string;\r\n    eqTabs: GW2EquipmentTab[];\r\n\r\n    profession: string;\r\n    eliteSpec: string;\r\n\r\n    Bags: object | null;\r\n\r\n    constructor(){\r\n        this.name=\"\";\r\n        this.eqTabs=[]\r\n        this.profession=\"\";\r\n        this.eliteSpec = \"No\";\r\n        this.Bags = null;\r\n    }\r\n\r\n    // switch resolve -- no need for api calls, this list only updates once a year anyway\r\n    ResolveSpecIdToEliteSpec(id : number) : string{\r\n        if(EliteSpecLookupTable[id] !== undefined){\r\n            return EliteSpecLookupTable[id];\r\n        }\r\n        return \"No\";\r\n    }\r\n\r\n    SetActivePvESpecializations(pveSpecs: any){\r\n\r\n        // 3 specs are set, that means an elite spec COULD be set\r\n        if(pveSpecs.length == 3){\r\n            let thirdSpec = pveSpecs[2];\r\n            this.eliteSpec = this.ResolveSpecIdToEliteSpec(thirdSpec.id);\r\n        }\r\n    }\r\n\r\n    GetCharacterClass() :string {\r\n        if(this.eliteSpec !== \"No\") return this.eliteSpec;\r\n        return this.profession;\r\n    }\r\n}\r\n", "import { GW2EquipmentItem } from \"./GW2EquipmentItem\";\r\n\r\nexport class GW2EquipmentTab{\r\n    id : number;\r\n    name: string;\r\n    equipment: GW2EquipmentItem[];\r\n\r\n    constructor(jsonObject: any){\r\n        this.id = jsonObject.tab;\r\n        this.name = jsonObject.name;\r\n        this.equipment = [];\r\n\r\n        if(jsonObject.equipment !== null && jsonObject.equipment !== undefined && Array.isArray(jsonObject.equipment)){\r\n            for (let i = 0; i < jsonObject.equipment.length; i++) {\r\n                const eq = jsonObject.equipment[i];\r\n                this.equipment.push({id:eq.id,slot:eq.slot,upgrades:eq.upgrades,infusions:eq.infusions});         \r\n            }\r\n        }\r\n    }\r\n    \r\n}", "import { GW2API_Call } from \"./GW2API_Call\";\r\n\r\nexport class GW2Item {\r\n    ItemID : number;\r\n\r\n    Name: string;\r\n    IconUrl: string;\r\n\r\n    constructor(itemID: number){\r\n        this.ItemID = itemID;\r\n        this.Name = \"\";\r\n        this.IconUrl = \"\";\r\n    }\r\n\r\n    populateFromAPI() : Promise<GW2Item>{\r\n        return new Promise<GW2Item>((resolve,error)=>{\r\n\r\n            let call : GW2API_Call = new GW2API_Call(\"NoAuth\");\r\n            return call.GetItemData(this.ItemID).then(result=>{\r\n                this.Name = result.Name;\r\n                this.IconUrl = result.IconUrl;\r\n                resolve(this);\r\n            })\r\n            .catch(err=>{\r\n                error(err);\r\n            })\r\n\r\n        });\r\n    };\r\n}"],
  "mappings": "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",
  "names": []
}
